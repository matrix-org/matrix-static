{% import "time" %}
{% import "github.com/matrix-org/gomatrix" %}
{% import "github.com/matrix-org/matrix-static/mxclient" %}
{% import "github.com/matrix-org/matrix-static/sanitizer" %}



{% code
    func parseEventTimestamp(unixTime int64) time.Time {
        return time.Unix(0, int64(unixTime)*int64(time.Millisecond))
    }
%}

{% func printTimestamp(unixTime int64) %}
    {%s parseEventTimestamp(unixTime).Format("2 Jan 2006 15:04:05") %}
{% endfunc %}



{% code
    type MemberEventContent struct {
        Membership  string
        AvatarURL   mxclient.MXCURL
        DisplayName string
    }

    func convertContentToMEC(content map[string]interface{}, homeserverBaseUrl string) (mec MemberEventContent) {
        if membership, ok := content["membership"].(string); ok {
            mec.Membership = membership
        }
        if avatarUrl, ok := content["avatar_url"].(string); ok {
            mec.AvatarURL = *mxclient.NewMXCURL(avatarUrl, homeserverBaseUrl)
        }
        if displayName, ok := content["displayname"].(string); ok {
            mec.DisplayName = displayName
        }

        return
    }

    func getMemberEventContent(ev *gomatrix.Event, homeserverBaseUrl string) MemberEventContent {
        return convertContentToMEC(ev.Content, homeserverBaseUrl)
    }

    func getMemberEventPrevContent(ev *gomatrix.Event, homeserverBaseUrl string) MemberEventContent {
        return convertContentToMEC(ev.PrevContent, homeserverBaseUrl)
    }

    type RoomChatPage struct {
        RoomInfo            mxclient.RoomInfo
        MemberMap           map[string]mxclient.MemberInfo
        Events              []gomatrix.Event
        PageSize            int
        CurrentOffset       int
        Anchor              string

        AtTopEnd    bool
        AtBottomEnd bool

        Sanitizer         *sanitizer.Sanitizer
        MediaBaseURL      string
        Highlight         string
    }
%}



{% stripspace %}
{% func (p *RoomChatPage) textForMRoomMemberEvent(ev *gomatrix.Event) %}
    {% code
        content := getMemberEventContent(ev, p.MediaBaseURL)
        prevContent := getMemberEventPrevContent(ev, p.MediaBaseURL)

        sender := ev.Sender
        target := *ev.StateKey
    %}

    {% switch content.Membership %}
        {% case "invite" %}
            {%= p.prettyPrintMember(sender) %}{% space %} invited {% space %}{%= p.prettyPrintMember(target) %}.
        {% case "ban" %}
            {% code
                var reasonString string
                if reason, ok := ev.Content["reason"].(string); ok {
                    reasonString = " (" + reason + ")"
                }
            %}
            {%= p.prettyPrintMember(sender) %}{% space %} banned {% space %}{%= p.prettyPrintMember(target) %}{%s reasonString %}.
        {% case "join" %}
            {%= p.prettyPrintMember(target) %}{% space %}
            {% if ev.PrevContent != nil && prevContent.Membership == "join" %}
                {% if prevContent.DisplayName == "" && content.DisplayName != "" %}
                    set their display name to {% space %}{%s content.DisplayName %}.
                {% elseif prevContent.DisplayName != "" && content.DisplayName == "" %}
                    removed their display name {% space %}{%s prevContent.DisplayName %}.
                {% elseif prevContent.DisplayName != content.DisplayName %}
                    changed their display name from {% space %}{%s prevContent.DisplayName %}{% space %} to {% space %}{%s content.DisplayName %}.
                {% elseif !prevContent.AvatarURL.IsValid() && content.AvatarURL.IsValid() %}
                    set a profile picture.
                {% elseif prevContent.AvatarURL.IsValid() && !content.AvatarURL.IsValid() %}
                    removed their profile picture.
                {% elseif prevContent.AvatarURL != content.AvatarURL %}
                    changed their profile picture.
                {% endif %}
            {% else %}
                joined the room.
            {% endif %}
        {% case "leave" %}
            {% if sender == target %}
                {%= p.prettyPrintMember(target) %}{% space %}
                {% if prevContent.Membership == "invite" %}
                    rejected invite.
                {% else %}
                    left the room.
                {% endif %}
            {% elseif prevContent.Membership == "ban" %}
                {%= p.prettyPrintMember(sender) %}{% space %} unbanned {% space %}{%= p.prettyPrintMember(target) %}.
            {% elseif prevContent.Membership == "leave" %}
                {%= p.prettyPrintMember(sender) %}{% space %} kicked {% space %}{%= p.prettyPrintMember(target) %}.
            {% elseif prevContent.Membership == "invite" %}
                {%= p.prettyPrintMember(sender) %}{% space %} withdrew {% space %}{%= p.prettyPrintMember(target) %}'s invite.
            {% else %}
                {%= p.prettyPrintMember(target) %}{% space %} left the room.
            {% endif %}
    {% endswitch %}
{% endfunc %}

{% func (p *RoomChatPage) renderFileEvent(ev *gomatrix.Event, imageUrl string) %}
    {% code
        alt := Str(ev.Content["body"])
        mxc := mxclient.NewMXCURL(ev.Content["url"].(string), p.MediaBaseURL)
    %}

    <a href="{%s mxc.ToURL() %}" rel="noopener">
        {% if imageUrl != "" %}
            <img class="{%s ev.Content["msgtype"].(string) %}" src="{%s imageUrl %}" alt="{%s alt %}" />
            <br>
        {% endif %}
        <small>Download {% space %} {%s Str(ev.Content["body"]) %}</small>
    </a>
{% endfunc %}

{% func (p *RoomChatPage) textForMRoomMessageEvent(ev *gomatrix.Event) %}
    {% switch ev.Content["msgtype"] %}
        {% case "m.image" %}
            {% code
                url := ev.Content["url"].(string)

                if thumbUrl, ok := ev.Content["thumbnail_url"].(string); ok {
                    url = thumbUrl
                }

                mxcThumbURL := mxclient.NewMXCURL(url, p.MediaBaseURL).ToThumbURL(360, 360, "scale")
            %}
            {%= p.renderFileEvent(ev, mxcThumbURL) %}
        {% case "m.video" %}
            {%= p.renderFileEvent(ev, "") %}
        {% case "m.audio" %}
            {%= p.renderFileEvent(ev, "") %}
        {% case "m.file" %}
            {%= p.renderFileEvent(ev, "") %}
        {% case "m.location" %}
            m.location Event
        {% default %} {% comment %}handler for "m.notice", "m.emote", "m.text"{% endcomment %}
            {% code
                var formattedOk bool
                var sanitizedFormattedBody, body string

                if ev.Content["format"] == "org.matrix.custom.html" {
                    if formattedBodyStr, ok := ev.Content["formatted_body"].(string); ok {
                        sanitizedFormattedBody, formattedOk = p.Sanitizer.Sanitize(formattedBodyStr)
                    }
                }
                if !formattedOk {
                    if bodyStr, ok := ev.Content["body"].(string); ok {
                        body = bodyStr
                    }
                }
            %}

            {% if formattedOk %}
                {%s= sanitizedFormattedBody %}
            {% elseif body != "" %}
                {%s body %}
            {% else %}
                <span class="redacted">Redacted or Malformed Event</span>
            {% endif %}
    {% endswitch %}
{% endfunc %}

{% func (p *RoomChatPage) printStateChange(ev *gomatrix.Event, key, thing string) %}
    {% code
        prev := Str(ev.PrevContent[key])
        cur := Str(ev.Content[key])
    %}

    {%= p.prettyPrintMember(ev.Sender) %}{% space %}

    {% if cur != "" && prev == "" %}
        set the {% space %}{%s thing %}{% space %} to "{%s cur %}".
    {% elseif cur == "" && prev != "" %}
        removed the {% space %}{%s thing %}{% space %} "{%s prev %}".
    {% else %}
        changed the {% space %}{%s thing %}{% space %} to "{%s cur %}" from "{%s prev %}".
    {% endif %}
{% endfunc %}

{% func (p *RoomChatPage) prettyPrintMember(mxid string) %}
    {% code memberInfo := p.MemberMap[mxid] %}

    <a href="./room/{%s p.RoomInfo.RoomID %}/members/{%s mxid %}">
        {% if memberInfo.AvatarURL.IsValid() %}
            {% code mxcURL := memberInfo.AvatarURL.ToThumbURL(48, 48, "crop") %}
            <img class="avatar userAvatar" src="{%s mxcURL %}" alt="{%s mxid %}" />
        {% else %}
            <img class="avatar userAvatar" src="./avatar/{%u memberInfo.GetName() %}" alt="{%s mxid %}" />
        {% endif %}

        {%s memberInfo.GetName() %}
    </a>
{% endfunc %}

{% code
    func needsDateSeparator(ev, prevEv *gomatrix.Event) bool {
        if prevEv == nil {
            return true
        }
        y1, m1, d1 := parseEventTimestamp(ev.Timestamp).Date()
        y2, m2, d2 := parseEventTimestamp(prevEv.Timestamp).Date()
        return y1 != y2 || m1 != m2 || d1 != d2
    }
%}

{% func (p *RoomChatPage) printEvent(ev, prevEv *gomatrix.Event, highlight bool) %}
    {% if needsDateSeparator(ev, prevEv) %}
        <tr class="timestamp dateSep">
            <td colspan="3">{%s parseEventTimestamp(ev.Timestamp).Format("2 Jan 2006") %}</td>
        </tr>
    {% endif %}

    {% code
        classes := "event"
        if highlight {
            classes += " evHighlight"
        }
    %}

    <tr class="{%s classes %}">
        {% switch ev.Type %}
            {% case "m.room.message" %}
                {% if ev.Content["msgtype"] == "m.emote" %}
                    <td class="sender"></td>
                    <td class="message">
                        *{% space %}{%= p.prettyPrintMember(ev.Sender) %}
                        {% space %}{%= p.textForMRoomMessageEvent(ev) %}
                    </td>
                {% else %}
                    <td class="sender nowrap">
                        {% if ev.Content["msgtype"] == "m.emote" %}*{% space %}{% endif %}
                        {%= p.prettyPrintMember(ev.Sender) %}
                    </td>
                    <td class="message">{%= p.textForMRoomMessageEvent(ev) %}</td>
                {% endif %}

            {% case "m.room.member" %}
                <td class="sender"></td>
                <td class="message">{%= p.textForMRoomMemberEvent(ev) %}</td>
            {% case "m.room.name" %}
                <td class="sender"></td>
                <td class="message">{%= p.printStateChange(ev, "name", "room name") %}</td>
            {% case "m.room.topic" %}
                <td class="sender"></td>
                <td class="message">{%= p.printStateChange(ev, "topic", "room topic") %}</td>
            {% case "m.room.history_visibility" %}
                <td class="sender"></td>
                <td class="message">{%= p.printStateChange(ev, "history_visibility", "history visibility") %}</td>
            {% case "m.room.join_rules" %}
                <td class="sender"></td>
                <td class="message">{%= p.printStateChange(ev, "join_rule", "join rule") %}</td>
            {% case "m.room.avatar" %}
                <td class="sender"></td>
                <td class="message">
                    Room Avatar Renderer.
                </td>
            {% case "m.room.power_levels" %}
                <td class="sender"></td>
                <td class="message">{%= p.prettyPrintMember(ev.Sender) %} changed room power levels.</td>
            {% case "m.room.tombstone" %}
                <td class="sender"></td>
                <td class="message">{%= p.prettyPrintMember(ev.Sender) %} upgraded this room. New room can be found <a href="./room/{%s ev.Content["replacement_room"].(string) %}/">here</a>.</td>
            {% case "im.vector.modular.widgets" %}
                <td class="sender"></td>
                {% code
                    widgetName := StringerfaceFallback(ev.Content["name"], ev.PrevContent["name"], ev.Content["type"], ev.PrevContent["type"])
                    if widgetName == "" {
                        widgetName = "Unknown"
                    }

                    mode := "removed"
                    if ev.Content["url"] != nil {
                        mode = "added"
                    }
                %}
                <td class="message">{%s widgetName %}{% space %} widget {% space %}{%s mode %}{% space %} by {% space %}{%= p.prettyPrintMember(ev.Sender) %}</td>
        {% endswitch %}
        <td class="timestamp nowrap">
            {% code
            time := parseEventTimestamp(ev.Timestamp)
            title := time.Format("2 Jan 2006 15:04:05")
            %}
            <a href="https://matrix.to/#/{%s p.RoomInfo.RoomID %}/{%s ev.ID %}" title="{%s title %}">
                {%s time.Format("15:04:05") %}
            </a>
        </td>
    </tr>
{% endfunc %}



{% func (p *RoomChatPage) Title() %}
     {%s p.RoomInfo.Name %}{% space %} - Public Room Timeline - Matrix Static
{% endfunc %}

{% func (p *RoomChatPage) Head() %}
    {% if !p.AtTopEnd %}
        <link rel="next" href="?anchor={%s p.Anchor %}&offset={%d p.CurrentOffset + p.PageSize %}">
    {% endif %}
    {% if !p.AtBottomEnd %}
        <link rel="prev" href="?anchor={%s p.Anchor %}&offset={%d p.CurrentOffset - len(p.Events) %}">
    {% endif %}
{% endfunc %}

{% func (p *RoomChatPage) Header() %}
    {%= PrintRoomHeader(p.RoomInfo) %}
{% endfunc %}

{% func (p *RoomChatPage) Body() %}
    <div class="paginate">
        {% if p.AtTopEnd %}
            <h4>You have reached the beginning of time (for this room).</h4>
        {% else %}
            <a href="./room/{%s p.RoomInfo.RoomID %}/?anchor={%s p.Anchor %}&offset={%d p.CurrentOffset + p.PageSize %}">
                <h4>Load older messages</h4>
            </a>
        {% endif %}
    </div>
    <hr>

    {% if len(p.Events) > 0 %}
        <table id="timeline">
            <thead>
                <tr>
                    <th>Sender</th>
                    <th>Message</th>
                    <th>Time</th>
                </tr>
            </thead>
            <tbody>
                {% code
                    var prevEv gomatrix.Event
                %}
                {% for _, event := range p.Events %}
                    {%= p.printEvent(&event, &prevEv, event.ID == p.Highlight) %}
                    {% code prevEv = event %}
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <h3>No Events</h3>
    {% endif %}

    <hr>
    <div class="paginate">
        {% if p.AtBottomEnd %}
            <h4>There are no newer messages yet.</h4>
        {% else %}
            <a href="./room/{%s p.RoomInfo.RoomID %}/?anchor={%s p.Anchor %}&offset={%d p.CurrentOffset - len(p.Events) %}">
                <h4>Show newer messages</h4>
            </a>
        {% endif %}
    </div>
    <hr>

    <a href="./">Back to Room List</a>
    <span style="float: right;">Room Version: {% space %}{%s p.RoomInfo.RoomVersion %}</span>
{% endfunc %}
{% endstripspace %}